// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Admin {
  id         Int       @id @default(autoincrement())
  firstName  String?
  lastName   String?
  dob        DateTime?
  mobile     String?   @unique
  username   String?   @unique
  email      String    @unique
  password   String
  photo      String?
  joinedDate DateTime  @default(now())
  gender    String?

  lastLogin DateTime?
  isVerified Boolean @default(false)
  verifiedAt DateTime?
  verifiedByEmail Boolean @default(false)
  verifiedByMobile Boolean @default(false)
  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted   Boolean   @default(false)
  deletedBy Int?
  deletedAt DateTime?

  roles       AdminRole[]
  permissions AdminPermission[]
  tokens      AdminToken[]
}

model Permission {
  id        Int               @id @default(autoincrement())
  name      String            @unique
  slug      String            @unique
  group     String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  roles     PermissionRole[]
  admins    AdminPermission[]
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  slug        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  permissions PermissionRole[]
  admins      AdminRole[]

  percentage Float @default(0)
}

model PermissionRole {
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId Int
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId       Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@id([permissionId, roleId])
}

model AdminRole {
  roleId  Int
  adminId Int
  admin   Admin @relation(fields: [adminId], references: [id], onDelete: Cascade)
  role    Role  @relation(fields: [roleId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([adminId, roleId])
}

model AdminPermission {
  permissionId Int
  adminId      Int

  admin      Admin      @relation(fields: [adminId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([adminId, permissionId])
}

model AdminToken {
  id           Int       @id @default(autoincrement())
  admin        Admin     @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminId      Int
  token        String
  refreshToken String
  ip           String?
  userAgent    String?
  expiresAt    DateTime?
  isRevoked    Boolean   @default(false)
  revokedAt    DateTime?
  revokedBy    Int?
  revokedByIp  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}



model Customer {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  dob       DateTime
  mobile    String   @unique
  email     String   @unique
  password  String
  photo     String?
  joinedAt  DateTime @default(now())

  lastLogin DateTime?

  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted   Boolean   @default(false)
  deletedBy Int?
  deletedAt DateTime?

  tokens UserToken[]
}


model UserToken {
  id              Int       @id @default(autoincrement())
  customer        Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId      Int
  token           String
  refreshToken    String
  ip              String?
  userAgent       String?
  expiresAt       DateTime?
  isRevoked       Boolean   @default(false)
  revokedAt       DateTime?
  revokedBy       Int?
  revokedByIp     String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}